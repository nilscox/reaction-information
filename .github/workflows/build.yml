name: build

on: [push]

env:
  API_IMAGE: nilscox/zetecom-api

jobs:
  # build

  api:
    name: build api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: whoan/docker-build-with-cache-action@v5
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          image_name: nilscox/zetecom-api
          image_tag: ${{ github.sha }}
          context: ./api

  app:
    name: build app
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/app-infra
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "yarn"
          cache-dependency-path: |
            packages/app-core/yarn.lock
            packages/app-infra/yarn.lock
      - run: yarn install --frozen-lockfile
        working-directory: packages/app-core
      - run: yarn install --frozen-lockfile
      - run: yarn build
        env:
          NODE_ENV: production
          BASENAME: /
          API_URL: __API_URL__
          WEBSITE_URL: __WEBSITE_URL__
          ANALYTICS_URL: __ANALYTICS_URL__
          ANALYTICS_SITE_ID: __ANALYTICS_SITE_ID__
      - uses: actions/upload-artifact@v2
        with:
          name: app
          path: packages/app-infra/dist

  build-publish-demo:
    name: build and publish demo
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    defaults:
      run:
        working-directory: packages/app-infra
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "yarn"
          cache-dependency-path: |
            packages/app-core/yarn.lock
            packages/app-infra/yarn.lock
      - run: yarn --frozen-lockfile
        working-directory: packages/app-core
      - run: yarn --frozen-lockfile
      - run: yarn build:demo
        env:
          NODE_ENV: production
          BASENAME: /zetecom
          WEBSITE_URL: https://zetecom.fr
          ANALYTICS_SITE_ID: stub
      - uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          branch: gh-pages
          folder: packages/app-infra/demo

  build-extension:
    name: build extension
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: if [ '${{ github.ref }}' = 'refs/heads/master' ]; then echo "environment=production" >> $GITHUB_ENV; fi
      - run: if [ '${{ github.ref }}' != 'refs/heads/master' ]; then echo "environment=staging" >> $GITHUB_ENV; fi
      - run: echo "extension_version=$(node -e $'console.log(require(\'./extension/package.json\').version)')" >> $GITHUB_ENV
      - run: yarn zip "$environment"
        working-directory: ./extension
      - run: echo "extension_zip=zetecom-extension-${{ env.environment }}-${{ env.extension_version }}" >> $GITHUB_ENV
      - run: mkdir -p artifacts/build && cd artifacts/build && unzip "../../extension/$extension_zip"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.extension_zip }}
          path: artifacts/build
      - run: echo "extension_sources_zip=zetecom-extension-${{ env.environment }}-sources-${{ env.extension_version }}" >> $GITHUB_ENV
      - run: mkdir -p artifacts/sources && cd artifacts/sources && unzip "../../extension/$extension_sources_zip"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.extension_sources_zip }}
          path: artifacts/sources

  build-website:
    name: build website
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: website
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "yarn"
          cache-dependency-path: website/yarn.lock
      - run: yarn install --frozen-lockfile
      - run: yarn build

  # # code quality

  code-quality:
    name: code quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: yarn --frozen-lockfile
        working-directory: ./api
      - run: yarn lint
        working-directory: ./api
      - run: yarn test:unit
        working-directory: ./api
      - run: yarn --frozen-lockfile
        working-directory: ./packages/app-core
      - run: yarn lint
        working-directory: ./packages/app-core
      - run: yarn test
        working-directory: ./packages/app-core
      - run: yarn --frozen-lockfile
        working-directory: ./packages/app-infra
      - run: yarn lint
        working-directory: ./packages/app-infra
      - run: yarn test
        working-directory: ./packages/app-infra
      - run: yarn --frozen-lockfile
        working-directory: ./extension
      - run: yarn test
        working-directory: ./extension
      - run: yarn --frozen-lockfile
        working-directory: ./website
      - run: yarn lint
        working-directory: ./website

  # # e2e

  api-e2e:
    name: api end-to-end tests
    runs-on: ubuntu-latest
    needs: [api]
    defaults:
      run:
        working-directory: ./api
    steps:
      - uses: harmon758/postgresql-action@v1
        with:
          postgresql version: "11.5"
          postgresql db: "test"
          postgresql user: "root"
          postgresql password: "root"
      - uses: actions/checkout@v2
      - run: yarn
      - run: yarn test:intg
      - run: yarn test:e2e

  e2e:
    name: end-to-end tests
    runs-on: ubuntu-latest
    needs: [api, app]
    defaults:
      run:
        working-directory: ./e2e
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: app
          path: e2e/app-dist
      - run: ../packages/app-infra/replace-env.sh ./app-dist
        env:
          API_URL: "http://localhost:3000"
          WEBSITE_URL: "http://localhost:8081"
          ANALYTICS_URL: ""
          ANALYTICS_SITE_ID: "stub"
      - run: mkdir -p ./artifacts/screenshots
      - run: yarn docker-compose:ci up -d
        env:
          GIT_SHA: ${{ github.sha }}
      - run: docker logs -f zc-api > ./artifacts/api.log &
      - run: yarn --frozen-lockfile
      - run: yarn build
      - run: yarn serve -l 7357 build &
      - run: yarn serve -s -l 8000 app-dist &
      - run: yarn wait-on -t $((30 * 1000)) http://localhost:3000/api/healthcheck
      - run: yarn test:headless --screenshots-dir ./artifacts/screenshots
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: e2e-artifacts
          path: e2e/artifacts

  # publish

  publish-api:
    name: publish api docker image
    runs-on: ubuntu-latest
    needs: [api-e2e, e2e, code-quality]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
    steps:
      - run: ref=${{ github.ref }}; echo "tag=${ref#refs/heads/}" >> $GITHUB_ENV
      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - run: docker pull $API_IMAGE:${{ github.sha }}
      - run: docker tag $API_IMAGE:${{ github.sha }} "$API_IMAGE:$tag"
      - run: docker push "$API_IMAGE:$tag"

  # deploy

  deploy-api:
    name: deploy api
    environment: staging
    runs-on: ubuntu-latest
    # needs: [publish-api]
    steps:
      - uses: actions/checkout@v2
      - run: ./deploy-api.sh --env staging --image $API_IMAGE:dev --port ${{ secrets.LISTEN_PORT }} --docker-host ${{ secrets.DOCKER_HOST }} --docker-auth ${{ secrets.DOCKER_AUTHENTICATION }} --base-dir ${{ secrets.BASE_DIR }}
        working-directory: ./scripts
        env:
          LOG_LEVEL: "log"
          TRUST_PROXY: "true"
          REFLECT_ORIGIN: "true"
          ADMIN_USER: ${{ secrets.ADMIN_USER }}
          APP_URL: "https://app-staging.zetecom.fr"
          WEBSITE_URL: "https://staging.zetecom.fr"
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_ENTITIES: "src/**/*.entity.js"
          DB_MIGRATIONS: "migrations/*.js"
          DB_SEEDS: "seeds/*.js"
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          EMAIL_BYPASS: "true"
          EMAIL_ACCOUNT_VERIFICATION: "false"
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          SECURE_COOKIE: "true"
          USER_AVATAR_DESTINATION: "/app/avatars"
